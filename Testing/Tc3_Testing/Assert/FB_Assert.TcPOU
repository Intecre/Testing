<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Assert" Id="{a8219960-23df-08de-19e5-3265dc5cd828}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Assert IMPLEMENTS I_Assert
VAR_INPUT
END_VAR
VAR_OUTPUT
	fbList:					FB_ListSTRING;
	nAssert:				DINT;
	nPassed:				DINT;
	nSkipped:				DINT;
	nFailures:				DINT;
	nErrors:				DINT;
END_VAR
VAR
	fbBuilder:				FB_StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_Assert" Id="{20d02a5f-db58-0c6c-14cd-0b5cd69f1cdb}">
      <Declaration><![CDATA[METHOD PUBLIC M_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	nAssert:= nAssert + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals" Id="{2f898a7a-61a5-0f1c-0018-13ff343db6b6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals : I_Assert
VAR_INPUT
	Expected:			ANY;
    Actual:				ANY;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected.diSize <> Actual.diSize THEN
	M_Error('', '', Message);
	
ELSIF Expected.TypeClass <> Actual.TypeClass THEN			
	M_Error('', '', Message);
	
ELSIF MEMCMP(Expected.pValue, Actual.pValue, DINT_TO_UDINT( Expected.diSize)) <> 0 THEN
	M_Failure('', '', Message);
	
ELSE
	M_Passed();
END_IF
M_Equals:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array" Id="{3f074cfa-3c0a-0eb4-0c1c-06c9b9f81a4b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array : I_Assert
VAR_INPUT
	Expected:			ANY;
    Actual:				ANY;
	TypeClass:			Any_Type;
	Tolerance:			LREAL;
	Message:			STRING(255);
END_VAR

VAR
	nIndex:				DINT;
	uExpected:			U_Assert;
	uActual:			U_Assert;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array:= THIS^;
M_Assert();
IF Expected.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_ARRAY THEN
	M_Failure('Expected.TypeClass.TYPE_ARRAY', Concat('Expected.TypeClass.', TO_STRING(Expected.TypeClass)), Message);
ELSIF Expected.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_ARRAY THEN
	M_Failure('Actual.TypeClass.TYPE_ARRAY', Concat('Actual.TypeClass.', TO_STRING(Expected.TypeClass)), Message);
ELSIF Expected.diSize <> Actual.diSize THEN
		M_Failure(Concat('Expected.diSize = ', DINT_TO_STRING(Expected.diSize)), Concat('Actual.diSize = ', DINT_TO_STRING(Expected.diSize)), Message);
ELSE
	CASE TypeClass OF
		Any_Type.TYPE_BOOL:
			FOR nIndex:= 0 TO Expected.diSize DO
				IF Expected.pValue[nIndex] <> Actual.pValue[nIndex] THEN
					M_ErrorArray(BOOL_TO_STRING(BYTE_TO_BOOL(Expected.pValue[nIndex])), BOOL_TO_STRING(BYTE_TO_BOOL(Actual.pValue[nIndex])), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
		
		Any_Type.TYPE_BYTE:
			FOR nIndex:= 0 TO Expected.diSize DO
				IF Expected.pValue[nIndex] <> Actual.pValue[nIndex] THEN
					M_ErrorArray(BYTE_TO_STRING(Expected.pValue[nIndex]), BYTE_TO_STRING(Actual.pValue[nIndex]), nIndex, Message);
					RETURN;
				END_IF
			END_FOR

		Any_Type.TYPE_USINT:
			FOR nIndex:= 0 TO Expected.diSize DO
				IF Expected.pValue[nIndex] <> Actual.pValue[nIndex] THEN
					M_ErrorArray(BYTE_TO_STRING(Expected.pValue[nIndex]), BYTE_TO_STRING(Actual.pValue[nIndex]), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_SINT:
			FOR nIndex:= 0 TO Expected.diSize DO
				IF Expected.pValue[nIndex] <> Actual.pValue[nIndex] THEN
					M_ErrorArray(SINT_TO_STRING(BYTE_TO_SINT(Expected.pValue[nIndex])), SINT_TO_STRING(BYTE_TO_SINT(Actual.pValue[nIndex])), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
		
		Any_Type.TYPE_WORD:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(WORD) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(WORD));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(WORD));		
				IF uExpected.pWORD^ <> uActual.pWORD^ THEN
					M_ErrorArray(WORD_TO_STRING(uExpected.pWORD^), WORD_TO_STRING(uActual.pWORD^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR

		Any_Type.TYPE_UINT:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(UINT) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(UINT));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(UINT));		
				IF uActual.pUINT^ <> uExpected.pUINT^ THEN
					M_ErrorArray(UINT_TO_STRING(uExpected.pUINT^), UINT_TO_STRING(uActual.pUINT^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_DWORD:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(DWORD) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(DWORD));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(DWORD));					
				IF uExpected.pDWORD^ <> uActual.pDWORD^ THEN
					M_ErrorArray(DWORD_TO_STRING(uExpected.pDWORD^), DWORD_TO_STRING(uActual.pDWORD^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_LWORD:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(LWORD) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LWORD));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LWORD));			
				IF uExpected.pLWORD^ <> uActual.pLWORD^ THEN
					M_ErrorArray(LWORD_TO_STRING(uExpected.pLWORD^), LWORD_TO_STRING(uActual.pLWORD^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_ULINT:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(UINT) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(UINT));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(UINT));			
				IF uExpected.pULINT^ <> uActual.pULINT^ THEN
					M_ErrorArray(ULINT_TO_STRING(uExpected.pULINT^), ULINT_TO_STRING(uActual.pULINT^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR

		Any_Type.TYPE_INT:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(INT) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(INT));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(INT));		
				IF uExpected.pINT^ <> uActual.pINT^ THEN
					M_ErrorArray(INT_TO_STRING(uExpected.pINT^), INT_TO_STRING(uActual.pINT^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_DINT:;
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(DINT) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(DINT));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(DINT));	
				IF uExpected.pDINT^ <> uActual.pDINT^ THEN
					M_ErrorArray(DINT_TO_STRING(uExpected.pDINT^), DINT_TO_STRING(uActual.pDINT^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
			
		Any_Type.TYPE_LINT:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(LINT) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LINT));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LINT));
				IF uExpected.pLINT^ <> uActual.pLINT^ THEN
					M_ErrorArray(LINT_TO_STRING(uActual.pLINT^), LINT_TO_STRING(uActual.pLINT^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
		
		Any_Type.TYPE_REAL:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(REAL) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(REAL));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(REAL));
				IF ABS(uExpected.pREAL^ - uActual.pREAL^) > ABS(Tolerance) THEN
					M_ErrorArray(REAL_TO_STRING(uExpected.pREAL^), REAL_TO_STRING(uActual.pREAL^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR
		Any_Type.TYPE_LREAL:
			FOR nIndex:= 0 TO Expected.diSize / SIZEOF(LREAL) DO
				uExpected.pBYTE:= Expected.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LREAL));
				uActual.pBYTE:= Actual.pValue + DINT_TO_LWORD(nIndex * SIZEOF(LREAL));
				IF ABS(uExpected.pLREAL^ - uActual.pLREAL^) > ABS(Tolerance) THEN
					M_ErrorArray(LREAL_TO_STRING(uExpected.pLREAL^), LREAL_TO_STRING(uActual.pLREAL^), nIndex, Message);
					RETURN;
				END_IF
			END_FOR	
	
	END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{a59ebe08-8964-0b2c-38a4-ac8145e6076b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(BOOL_TO_STRING(Expected), BOOL_TO_STRING(Actual), Message);
END_IF
M_Equals_BOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{2d0157fb-a7a4-0a24-2f21-b00692b22401}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;
    Actual:				BYTE;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(BYTE_TO_STRING(Expected), BYTE_TO_STRING(Actual), Message);
END_IF
M_Equals_BYTE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_DINT" Id="{472197bd-33d6-0fc3-0f19-0526022a1a63}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;
    Actual:				DINT;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(DINT_TO_STRING(Expected), DINT_TO_STRING(Actual), Message);
END_IF
M_Equals_DINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_INT" Id="{69d1cbc7-70c0-0cef-01a9-39c278d3ddf8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;
    Actual:				INT;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(INT_TO_STRING(Expected), INT_TO_STRING(Actual), Message);
END_IF
M_Equals_INT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LINT" Id="{a849c410-b14f-0b59-2551-ae0df6d9a14d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;
    Actual:				LINT;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(LINT_TO_STRING(Expected), LINT_TO_STRING(Actual), Message);
END_IF
M_Equals_LINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{56afa40f-43c1-0c87-2e3a-7092c4bb5d6b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;
    Actual:				LREAL;
	Tolerance:			LREAL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF LrealIsNaN(Expected) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Expected is NaN ', Message));
ELSIF LrealIsNaN(Actual) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Actual is NaN ', Message));	
ELSIF LrealIsNaN(Tolerance) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Tolerance is NaN ', Message));	
ELSIF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Message);
END_IF
M_Equals_LREAL:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_REAL" Id="{d6abdbdc-3ed4-0597-3832-aa884ad8510e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;
    Actual:				REAL;
	Tolerance:			REAL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF RealIsNaN(Expected) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Expected is NaN ', Message));
ELSIF RealIsNaN(Actual) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Actual is NaN ', Message));	
ELSIF RealIsNaN(Tolerance) THEN
	M_Failure(LREAL_TO_STRING(Expected), LREAL_TO_STRING(Actual), Concat('Tolerance is NaN ', Message));	
ELSIF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	M_Failure(REAL_TO_STRING(Expected), REAL_TO_STRING(Actual), Message);
END_IF
M_Equals_REAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_STRING" Id="{be4cf22a-d59c-479d-91df-27b8c49cf405}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(Expected, Actual, Message);
END_IF
M_Equals_STRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_TIME" Id="{91b48555-653d-0553-104e-334d1e902474}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_TIME : I_Assert
VAR_INPUT
	Expected:			TIME;
    Actual:				TIME;
	Tolerance:			TIME;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	M_Failure(TIME_TO_STRING(Expected), TIME_TO_STRING(Actual), Message);
END_IF
M_Equals_TIME:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_UDINT" Id="{dab23cde-89d2-0c20-3b51-ea863cfc23a2}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UDINT : I_Assert
VAR_INPUT
	Expected:			UDINT;
    Actual:				UDINT;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(UDINT_TO_STRING(Expected), UDINT_TO_STRING(Actual), Message);
END_IF
M_Equals_UDINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_UINT" Id="{d4264b4a-bfbe-0a03-22f6-a7578de8f804}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UINT : I_Assert
VAR_INPUT
	Expected:			UINT;
    Actual:				UINT;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(UINT_TO_STRING(Expected), UINT_TO_STRING(Actual), Message);
END_IF
M_Equals_UINT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_WSTRING" Id="{d57eeb77-552a-03e8-31d9-648afdaf68b1}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_WSTRING : I_Assert
VAR_INPUT
	Expected:			WSTRING(255);
    Actual:				WSTRING(255);
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	M_Failure(WSTRING_TO_STRING(Expected), WSTRING_TO_STRING(Actual), Message);
END_IF
M_Equals_WSTRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{8fb01682-0d3e-09d1-1052-e80c2a25c45c}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('$T$T$T<error message="');
	fbBuilder.M_Append(Message);
	fbBuilder.M_Append('" type="ArithmeticError">');
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(Expected);
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(Actual);
	fbBuilder.M_Append('"</error>');
	fbList.M_Add(fbBuilder.M_ToString());
	nErrors:= nErrors + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ErrorArray" Id="{e9eed25c-66d5-0c2c-3d16-d73e2d2d84e1}">
      <Declaration><![CDATA[METHOD PUBLIC M_ErrorArray
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Index:				DINT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('$T$T$T<error message="');
	fbBuilder.M_Append(Message);
	fbBuilder.M_Append('" type="ArithmeticError">');
	fbBuilder.M_Append('Index = "');
	fbBuilder.M_AppendInt(Index);
	fbBuilder.M_Append('" Expected = "');
	fbBuilder.M_Append(Expected);
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(Actual);
	fbBuilder.M_Append('"</error>');
	fbList.M_Add(fbBuilder.M_ToString());
	nErrors:= nErrors + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Failure" Id="{c1dc23cc-f885-0540-1115-b7058773bd0a}">
      <Declaration><![CDATA[METHOD PUBLIC M_Failure
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('$T$T$T<failure message="');
	fbBuilder.M_Append(Message);
	fbBuilder.M_Append('" type="AssertionError">');
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(Expected);
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(Actual);
	fbBuilder.M_Append('"</failure>');
	fbList.M_Add(fbBuilder.M_ToString());
	nFailures:= nFailures + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_IsTRUE" Id="{ff21833d-ba1f-05de-0ce2-388ab8c48e28}">
      <Declaration><![CDATA[METHOD PUBLIC M_IsTRUE : I_Assert
VAR_INPUT
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Actual THEN
	M_Passed();
ELSE
	M_Failure('TRUE', BOOL_TO_STRING(Actual), Message);
	fbList.M_Add(fbBuilder.M_ToString());
	nFailures:= nFailures + 1;
END_IF
M_IsTRUE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Passed" Id="{0da5074d-f435-0060-10d7-5f55502ee455}">
      <Declaration><![CDATA[METHOD PUBLIC M_Passed
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	nPassed:= nPassed + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{968629c2-18de-07f2-0ab0-109e8e7d42c9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
nAssert:= 0;
nPassed:= 0;
nSkipped:= 0;
nFailures:= 0;
nErrors:= 0;
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Skip" Id="{01e03b07-71f0-0cb8-3278-37acfad51370}">
      <Declaration><![CDATA[METHOD PUBLIC M_Skip
VAR_INPUT
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
nAssert:= 0;
nPassed:= 0;
nFailures:= 0;
nErrors:= 0;
fbBuilder.M_Reset();
fbBuilder.M_Append('$T$T$T<skipped message="');
fbBuilder.M_Append(Message);
fbBuilder.M_Append('" />');
fbList.M_Add(fbBuilder.M_ToString());
nSkipped:= nSkipped + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_TcError" Id="{afc6c894-8d15-0f9c-362a-c323312b5010}">
      <Declaration><![CDATA[METHOD PUBLIC M_TcError : I_Assert
VAR_INPUT
	nErrorId:			UDINT;
	Message:			STRING(255);
END_VAR
VAR
	eError:				E_AdsError:= nErrorId;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
fbBuilder.M_Reset();
IF nErrorID = E_AdsErr.NOERR THEN
	M_Passed();
ELSE
	M_Failure(TO_STRING(E_AdsErr.NOERR), TO_STRING(eError), Message);
	fbList.M_Add(fbBuilder.M_ToString());
END_IF
M_TcError:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Assert">
      <LineId Id="7" Count="2" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals">
      <LineId Id="241" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="251" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="260" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="269" Count="3" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array">
      <LineId Id="482" Count="141" />
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BOOL">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BYTE">
      <LineId Id="116" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="115" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_DINT">
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_INT">
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LREAL">
      <LineId Id="194" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="230" Count="2" />
      <LineId Id="107" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="124" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_REAL">
      <LineId Id="118" Count="0" />
      <LineId Id="152" Count="5" />
      <LineId Id="69" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_STRING">
      <LineId Id="112" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_TIME">
      <LineId Id="194" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="124" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_UDINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_UINT">
      <LineId Id="115" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="114" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_WSTRING">
      <LineId Id="112" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="111" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Error">
      <LineId Id="31" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_ErrorArray">
      <LineId Id="31" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Failure">
      <LineId Id="21" Count="0" />
      <LineId Id="24" Count="8" />
      <LineId Id="39" Count="0" />
      <LineId Id="22" Count="1" />
    </LineIds>
    <LineIds Name="FB_Assert.M_IsTRUE">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Passed">
      <LineId Id="31" Count="2" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Reset">
      <LineId Id="15" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Skip">
      <LineId Id="20" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_TcError">
      <LineId Id="7" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>