<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Assert" Id="{a8219960-23df-08de-19e5-3265dc5cd828}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Assert IMPLEMENTS I_Assert
VAR_INPUT
	fbXml:					FB_XmlDomParser;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	node:					PVOID;
	nAssertions:			INT;
	nFailures:				INT;
	nErrors:				INT;
	nSkipped:				INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[M_Reset();]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{77322c51-28ff-0124-2b45-3717a091c998}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL:=TRUE;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbXml.NewDocument();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_ANY" Id="{2f898a7a-61a5-0f1c-0018-13ff343db6b6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ANY : I_Assert
VAR_INPUT
	Expected:			ANY;
    Actual:				ANY;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected.diSize <> Actual.diSize THEN			
	nErrors:= nErrors + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'error ');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'ArithmeticError');		// type
ELSIF Expected.TypeClass <> Actual.TypeClass THEN			
	nErrors:= nErrors + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'error ');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'ArithmeticError');		// type
ELSIF MEMCMP(Expected.pValue, Actual.pValue, DINT_TO_UDINT( Expected.diSize)) <> 0 THEN
	nFailures:= nFailures + 1;		
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type	
END_IF
M_Equals_ANY:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{a59ebe08-8964-0b2c-38a4-ac8145e6076b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_BOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{2d0157fb-a7a4-0a24-2f21-b00692b22401}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;
    Actual:				BYTE;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_BYTE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_DINT" Id="{472197bd-33d6-0fc3-0f19-0526022a1a63}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;
    Actual:				DINT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_DINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_INT" Id="{69d1cbc7-70c0-0cef-01a9-39c278d3ddf8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;
    Actual:				INT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_INT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LINT" Id="{a849c410-b14f-0b59-2551-ae0df6d9a14d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;
    Actual:				LINT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_LINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{56afa40f-43c1-0c87-2e3a-7092c4bb5d6b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;
    Actual:				LREAL;
	Tolerance:			LREAL;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_LREAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_REAL" Id="{d6abdbdc-3ed4-0597-3832-aa884ad8510e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;
    Actual:				REAL;
	Tolerance:			REAL;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_REAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_STRING" Id="{be4cf22a-d59c-479d-91df-27b8c49cf405}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssertions:= nAssertions + 1;
IF Expected = Actual THEN
	// Passed
ELSE
	nFailures:= nFailures + 1;
	node:=	fbXml.AppendNode(fbXml.GetDocumentNode(), 'failure');
			fbXml.AppendAttribute(node, 'message', Message);			// message
			fbXml.AppendAttribute(node, 'type', 'AssertionError');		// type
END_IF
M_Equals_STRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{968629c2-18de-07f2-0ab0-109e8e7d42c9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbXml.NewDocument();
nAssertions:= 0;
nFailures:= 0;
nErrors:= 0;
nSkipped:= 0;
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Assertions" Id="{ea6a9980-6127-4b97-85a2-2a7f9c0ec844}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Assertions : int]]></Declaration>
      <Get Name="Get" Id="{14ceb34e-4bf4-4c00-b722-209b0a43b8f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Assertions:= nAssertions;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Errors" Id="{30d0f722-5b86-4956-b739-ae22d25a0fdb}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Errors : int]]></Declaration>
      <Get Name="Get" Id="{31dbbfcc-0dc0-4660-8eae-a37a106448f7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Errors:= nErrors;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Failures" Id="{48dcd0d0-b609-448f-8d21-4b49f4635ffd}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Failures : int]]></Declaration>
      <Get Name="Get" Id="{71c5c92e-2c3b-44cb-88d6-423c909252fe}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Failures:= nFailures;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Skipped" Id="{d5c526d8-b1d3-4c57-8c14-d538dbcb947b}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Skipped : int]]></Declaration>
      <Get Name="Get" Id="{5ccb0992-06db-4047-8401-ea4eadea5ee2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Skipped:= nSkipped;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.FB_init">
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_ANY">
      <LineId Id="17" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="43" Count="0" />
      <LineId Id="58" Count="3" />
      <LineId Id="57" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BOOL">
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BYTE">
      <LineId Id="35" Count="2" />
      <LineId Id="44" Count="5" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_DINT">
      <LineId Id="54" Count="2" />
      <LineId Id="63" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_INT">
      <LineId Id="35" Count="2" />
      <LineId Id="44" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LINT">
      <LineId Id="54" Count="2" />
      <LineId Id="63" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LREAL">
      <LineId Id="77" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="90" Count="4" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_REAL">
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="44" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_STRING">
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="42" Count="4" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Reset">
      <LineId Id="11" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Assertions.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Errors.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Failures.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Skipped.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>