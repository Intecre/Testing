<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Assert" Id="{a8219960-23df-08de-19e5-3265dc5cd828}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Assert IMPLEMENTS I_Assert
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbList:					FB_ListAssert;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[M_Reset();]]></ST>
    </Implementation>
    <Method Name="M_Equals_ANY" Id="{2f898a7a-61a5-0f1c-0018-13ff343db6b6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ANY : I_Assert
VAR_INPUT
	Expected:			ANY;
    Actual:				ANY;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected.diSize <> Actual.diSize THEN
	fbList.M_Add(E_Assert.Error, Message, 'ArithmeticError');
	
ELSIF Expected.TypeClass <> Actual.TypeClass THEN			
	fbList.M_Add(E_Assert.Error, Message, 'ArithmeticError');
	
ELSIF MEMCMP(Expected.pValue, Actual.pValue, DINT_TO_UDINT( Expected.diSize)) <> 0 THEN
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
	
ELSE
	fbList.M_Add(E_Assert.Passed, Message, '');
END_IF
M_Equals_ANY:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{a59ebe08-8964-0b2c-38a4-ac8145e6076b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_BOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{2d0157fb-a7a4-0a24-2f21-b00692b22401}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;
    Actual:				BYTE;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_BYTE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_DINT" Id="{472197bd-33d6-0fc3-0f19-0526022a1a63}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;
    Actual:				DINT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_DINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_INT" Id="{69d1cbc7-70c0-0cef-01a9-39c278d3ddf8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;
    Actual:				INT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_INT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LINT" Id="{a849c410-b14f-0b59-2551-ae0df6d9a14d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;
    Actual:				LINT;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_LINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{56afa40f-43c1-0c87-2e3a-7092c4bb5d6b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;
    Actual:				LREAL;
	Tolerance:			LREAL;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_LREAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_REAL" Id="{d6abdbdc-3ed4-0597-3832-aa884ad8510e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;
    Actual:				REAL;
	Tolerance:			REAL;
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_REAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_STRING" Id="{be4cf22a-d59c-479d-91df-27b8c49cf405}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected = Actual THEN
	fbList.M_Add(E_Assert.Passed, Message, '');
ELSE
	fbList.M_Add(E_Assert.Failure, Message, 'AssertionError');
END_IF
M_Equals_STRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{968629c2-18de-07f2-0ab0-109e8e7d42c9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Errors" Id="{c2f1d2fa-9307-068f-1acf-e75b532667e5}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Errors : Dint]]></Declaration>
      <Get Name="Get" Id="{a5ccd883-3b3c-0f49-2d8e-96c32fb51d3a}">
        <Declaration><![CDATA[VAR
	nIndex: DINT;
	stAssert: ST_Assert;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Errors:= 0;
WHILE nIndex < fbList.P_Length DO
	stAssert:= fbList.M_Get(nIndex);
	IF stAssert.eAssert = E_Assert.Error THEN
		P_Errors:= P_Errors + 1;
	END_IF
	nIndex:= nIndex + 1;
END_WHILE]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Failures" Id="{7b75fad0-983c-08d8-39cd-19ad57f0534c}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Failures : Dint]]></Declaration>
      <Get Name="Get" Id="{73818913-ecc0-0a35-28ac-898d2816923d}">
        <Declaration><![CDATA[VAR
	nIndex: DINT;
	stAssert: ST_Assert;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Failures:= 0;
WHILE nIndex < fbList.P_Length DO
	stAssert:= fbList.M_Get(nIndex);
	IF stAssert.eAssert = E_Assert.Failure THEN
		P_Failures:= P_Failures + 1;
	END_IF
	nIndex:= nIndex + 1;
END_WHILE]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_List" Id="{ea6a9980-6127-4b97-85a2-2a7f9c0ec844}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_List : I_ListAssert;]]></Declaration>
      <Get Name="Get" Id="{14ceb34e-4bf4-4c00-b722-209b0a43b8f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_List:= fbList;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Passed" Id="{b0d7f1e9-2e57-0b75-193a-08f7173d4082}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Passed : Dint]]></Declaration>
      <Get Name="Get" Id="{986e49f4-9643-0bf4-0a4b-973e66bdc6aa}">
        <Declaration><![CDATA[VAR
	nIndex: DINT;
	stAssert: ST_Assert;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Passed:= 0;
WHILE nIndex < fbList.P_Length DO
	stAssert:= fbList.M_Get(nIndex);
	IF stAssert.eAssert = E_Assert.Error THEN
		P_Passed:= P_Passed + 1;
	END_IF
	nIndex:= nIndex + 1;
END_WHILE]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Skipped" Id="{36f04b8a-e372-049a-1f34-1e0fa90b7d59}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Skipped : Dint]]></Declaration>
      <Get Name="Get" Id="{40f1645d-6d95-07b4-1726-367ed90984bb}">
        <Declaration><![CDATA[VAR
	nIndex: DINT;
	stAssert: ST_Assert;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Skipped:= 0;
WHILE nIndex < fbList.P_Length DO
	stAssert:= fbList.M_Get(nIndex);
	IF stAssert.eAssert = E_Assert.Skipped THEN
		P_Skipped:= P_Skipped + 1;
	END_IF
	nIndex:= nIndex + 1;
END_WHILE]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_ANY">
      <LineId Id="49" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BOOL">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BYTE">
      <LineId Id="56" Count="3" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_DINT">
      <LineId Id="74" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_INT">
      <LineId Id="55" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LINT">
      <LineId Id="74" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LREAL">
      <LineId Id="107" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_REAL">
      <LineId Id="56" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_STRING">
      <LineId Id="53" Count="3" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Reset">
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Errors.Get">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="21" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Failures.Get">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="21" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_List.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Passed.Get">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="21" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.P_Skipped.Get">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="21" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>