<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Assert" Id="{a8219960-23df-08de-19e5-3265dc5cd828}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Assert IMPLEMENTS I_Assert
VAR_INPUT
END_VAR
VAR_OUTPUT
	fbList:					FB_ListSTRING;
	nAssert:				DINT;
	nPassed:				DINT;
	nSkipped:				DINT;
	nFailures:				DINT;
	nErrors:				DINT;
END_VAR
VAR
	sData:					STRING(255);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_AddData" Id="{d002ab3f-1d38-040c-3e98-771f32ebb52b}">
      <Declaration><![CDATA[METHOD PUBLIC M_AddData : I_Assert
VAR_INPUT
	Value:			ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_ANY" Id="{2f898a7a-61a5-0f1c-0018-13ff343db6b6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ANY : I_Assert
VAR_INPUT
	Expected:			ANY;
    Actual:				ANY;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected.diSize <> Actual.diSize THEN
	sValue:= '<error message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</error>');	
	fbList.M_Add(sValue);
	nErrors:= nErrors + 1;
	
ELSIF Expected.TypeClass <> Actual.TypeClass THEN			
	sValue:= '<error message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</error>');	
	fbList.M_Add(sValue);
	nErrors:= nErrors + 1;
	
ELSIF MEMCMP(Expected.pValue, Actual.pValue, DINT_TO_UDINT( Expected.diSize)) <> 0 THEN
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
	
ELSE
	nPassed:= nPassed + 1;
END_IF
M_Equals_ANY:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{a59ebe08-8964-0b2c-38a4-ac8145e6076b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_BOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{2d0157fb-a7a4-0a24-2f21-b00692b22401}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;
    Actual:				BYTE;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_BYTE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_DINT" Id="{472197bd-33d6-0fc3-0f19-0526022a1a63}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;
    Actual:				DINT;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_DINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_INT" Id="{69d1cbc7-70c0-0cef-01a9-39c278d3ddf8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;
    Actual:				INT;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_INT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LINT" Id="{a849c410-b14f-0b59-2551-ae0df6d9a14d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;
    Actual:				LINT;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_LINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{56afa40f-43c1-0c87-2e3a-7092c4bb5d6b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;
    Actual:				LREAL;
	Tolerance:			LREAL;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_LREAL:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_REAL" Id="{d6abdbdc-3ed4-0597-3832-aa884ad8510e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;
    Actual:				REAL;
	Tolerance:			REAL;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_REAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_STRING" Id="{be4cf22a-d59c-479d-91df-27b8c49cf405}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);
    Actual:				STRING(255);
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Expected = Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_Equals_STRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_IsTRUE" Id="{ff21833d-ba1f-05de-0ce2-388ab8c48e28}">
      <Declaration><![CDATA[METHOD PUBLIC M_IsTRUE : I_Assert
VAR_INPUT
    Actual:				BOOL;
	Message:			STRING(255);
END_VAR
VAR 
	sValue:				STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nAssert:= nAssert + 1;
IF Actual THEN
	nPassed:= nPassed + 1;
ELSE
	sValue:= '<failure message="';
	sValue:= Concat(sValue, Message);
	sValue:= Concat(sValue, '" type="ArithmeticError">');
	sValue:= Concat(sValue, sData);
	sValue:= Concat(sValue, '</failure>');	
	fbList.M_Add(sValue);
	nFailures:= nFailures + 1;
END_IF
M_IsTRUE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{968629c2-18de-07f2-0ab0-109e8e7d42c9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
nAssert:= 0;
nPassed:= 0;
nSkipped:= 0;
nFailures:= 0;
nErrors:= 0;
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_AddData">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_ANY">
      <LineId Id="207" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="155" Count="3" />
      <LineId Id="189" Count="5" />
      <LineId Id="164" Count="2" />
      <LineId Id="201" Count="5" />
      <LineId Id="172" Count="2" />
      <LineId Id="180" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BOOL">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="76" Count="5" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BYTE">
      <LineId Id="90" Count="0" />
      <LineId Id="93" Count="9" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_DINT">
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="9" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_INT">
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="9" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LINT">
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="9" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LREAL">
      <LineId Id="168" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="171" Count="8" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="124" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_REAL">
      <LineId Id="92" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="95" Count="8" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_STRING">
      <LineId Id="87" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="90" Count="8" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_IsTRUE">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="76" Count="5" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Reset">
      <LineId Id="15" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="21" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>