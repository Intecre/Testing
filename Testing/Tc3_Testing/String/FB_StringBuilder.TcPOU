<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_StringBuilder" Id="{9f827a4a-fbbc-02a4-003e-5f1aba2ebf50}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK FB_StringBuilder IMPLEMENTS I_StringBuilder
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	pList:			POINTER TO BYTE;
	aList:			POINTER TO POINTER TO STRING(1000):= ADR(pList);
	nLength:		UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{49473793-c4b9-069d-13de-b295d25dcc6b}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Append" Id="{2645d32d-7cde-0125-3686-22ccb6a7762e}">
      <Declaration><![CDATA[METHOD M_Append : I_StringBuilder
VAR_INPUT
	Value	: STRING(255);
END_VAR
VAR
	pValue: 	POINTER TO BYTE:=ADR(Value);
	nValue:		UDINT:= LEN2(pValue);
	pOldList:	POINTER TO BYTE:= pList;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// First Item
IF pList = 0 THEN
	nLength:= nValue;
	pList:= __NEW(BYTE, (nLength + 1));
	CONCAT2(pList, pValue, pList, nLength + 1);
ELSE
	// new Length
	nLength:= nLength + nValue;
	// new pointer
	pList:= __NEW(BYTE, (SIZEOF(BYTE) * (nLength + 1)));
	
	CONCAT2(pOldList, pValue, pList, nLength + 1);
	// delete old
	__DELETE(pOldList);

END_IF
M_Append:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AppendANY" Id="{8dc6449d-20e9-08f8-23cf-a3212782295d}">
      <Declaration><![CDATA[METHOD PUBLIC M_AppendANY : I_StringBuilder
VAR_INPUT
	Value:		ANY;
END_VAR
VAR
	sValue:				STRING(255);
	pBOOL:				POINTER TO BOOL;
	pTIME:				POINTER TO TIME;
	pLTIME:				POINTER TO LTIME;
	pDATE:				POINTER TO DATE;
	pDATE_AND_TIME:		POINTER TO DATE_AND_TIME;		
	pSTRING:			POINTER TO STRING;
	pWSTRING:			POINTER TO WSTRING;
    pSINT:				POINTER TO SINT;
    pUSINT:				POINTER TO USINT;
    pWORD:				POINTER TO WORD;//16 bit
    pINT:				POINTER TO INT; //16 bit
    pUINT:				POINTER TO UINT; //16 bit
	            		
    pDINT:				POINTER TO DINT; //32 bit
    pUDINT:				POINTER TO UDINT; //32 bit
    pDWORD:				POINTER TO DWORD; //32 bit
    pREAL:				POINTER TO REAL; //32 bit
	            		
    pLREAL:				POINTER TO LREAL; //64 bit
    pLWORD:				POINTER TO LWORD; //64 bit
	pLINT:				POINTER TO LINT;
 	pULINT:				POINTER TO ULINT;   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE Value.TypeClass OF
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		pBOOL:= Value.pValue;
		sValue:= BOOL_TO_STRING(pBOOL^);
	__SYSTEM.TYPE_CLASS.TYPE_BIT:
		sValue:= TO_STRING(Value.pValue^);
	__SYSTEM.TYPE_CLASS.TYPE_BYTE:
		sValue:= BYTE_TO_STRING(Value.pValue^);
	__SYSTEM.TYPE_CLASS.TYPE_WORD:
		pWORD:= Value.pValue;
		sValue:= WORD_TO_STRING(pWORD^);
	__SYSTEM.TYPE_CLASS.TYPE_DWORD:
		pDWORD:= Value.pValue;
		sValue:= DWORD_TO_STRING(pDWORD^);
	__SYSTEM.TYPE_CLASS.TYPE_LWORD:
		pLWORD:= Value.pValue;
		sValue:= LWORD_TO_STRING(pLWORD^);
	__SYSTEM.TYPE_CLASS.TYPE_SINT:
		pSINT:= Value.pValue;
		sValue:= SINT_TO_STRING(pSINT^);
	__SYSTEM.TYPE_CLASS.TYPE_INT:
		pINT:= Value.pValue;
		sValue:= INT_TO_STRING(pINT^);
	__SYSTEM.TYPE_CLASS.TYPE_DINT:
		pDINT:= Value.pValue;
		sValue:= DINT_TO_STRING(pDINT^);
	__SYSTEM.TYPE_CLASS.TYPE_LINT:;
		pLINT:= Value.pValue;
		sValue:= LINT_TO_STRING(pLINT^);
	__SYSTEM.TYPE_CLASS.TYPE_USINT:
		sValue:= USINT_TO_STRING(Value.pValue^);
	__SYSTEM.TYPE_CLASS.TYPE_UINT:
		pUINT:= Value.pValue;
		sValue:= UINT_TO_STRING(pUINT^);
	__SYSTEM.TYPE_CLASS.TYPE_UDINT:
		pUDINT:= Value.pValue;
		sValue:= UDINT_TO_STRING(pUDINT^);
	__SYSTEM.TYPE_CLASS.TYPE_ULINT:
		pULINT:= Value.pValue;
		sValue:= ULINT_TO_STRING(pULINT^);
	__SYSTEM.TYPE_CLASS.TYPE_REAL:
		pREAL:= Value.pValue;
		sValue:= REAL_TO_STRING(pREAL^);
	__SYSTEM.TYPE_CLASS.TYPE_LREAL:
		pLREAL:= Value.pValue;
		sValue:= LREAL_TO_STRING(pLREAL^);
	__SYSTEM.TYPE_CLASS.TYPE_STRING:
		pSTRING:= Value.pValue;
		sValue:= pSTRING^;	
	__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		pWSTRING:= Value.pValue;
		sValue:= WSTRING_TO_STRING(pWSTRING^);	
	__SYSTEM.TYPE_CLASS.TYPE_TIME:
		pTIME:= Value.pValue;
		sValue:= TIME_TO_STRING(pTIME^);	
	__SYSTEM.TYPE_CLASS.TYPE_DATE:
		pDATE:= Value.pValue;
		sValue:= DATE_TO_STRING(pDATE^);	
	__SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		pDATE:= Value.pValue;
		sValue:= DATE_TO_STRING(pDATE^);	
	__SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:;	
	__SYSTEM.TYPE_CLASS.TYPE_POINTER:;
	__SYSTEM.TYPE_CLASS.TYPE_REFERENCE:;
	__SYSTEM.TYPE_CLASS.TYPE_SUBRANGE:;
	__SYSTEM.TYPE_CLASS.TYPE_ENUM:;
	__SYSTEM.TYPE_CLASS.TYPE_ARRAY:;
	__SYSTEM.TYPE_CLASS.TYPE_PARAMS:;
	__SYSTEM.TYPE_CLASS.TYPE_USERDEF:;
	__SYSTEM.TYPE_CLASS.TYPE_NONE:;
	__SYSTEM.TYPE_CLASS.TYPE_ANY:;
	__SYSTEM.TYPE_CLASS.TYPE_ANYBIT:;
	__SYSTEM.TYPE_CLASS.TYPE_ANYDATE:;
	__SYSTEM.TYPE_CLASS.TYPE_ANYINT:;
	__SYSTEM.TYPE_CLASS.TYPE_ANYNUM:;
	__SYSTEM.TYPE_CLASS.TYPE_LAZY:;
	__SYSTEM.TYPE_CLASS.TYPE_LTIME:
		pLTIME:= Value.pValue;
		sValue:= TIME_TO_STRING(pTIME^);	
	__SYSTEM.TYPE_CLASS.TYPE_BITCONST:;
END_CASE

M_Append(sValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AppendBOOL" Id="{56944132-17d4-0f65-1303-77dc1a8188a8}">
      <Declaration><![CDATA[METHOD PUBLIC M_AppendBOOL  : I_StringBuilder
VAR_INPUT
	Value:			BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Append(BOOL_TO_STRING(Value));
M_AppendBOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AppendINT" Id="{cb694219-e5bf-0cf7-0e23-ed0db5df6cae}">
      <Declaration><![CDATA[METHOD PUBLIC M_AppendINT : I_StringBuilder
VAR_INPUT
	Value	: LINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Append(LINT_TO_STRING(Value));
M_AppendINT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_AppendREAL" Id="{f620367a-1ee6-014d-1c74-6ebffa68edce}">
      <Declaration><![CDATA[METHOD PUBLIC M_AppendREAL : I_StringBuilder
VAR_INPUT
	Value:		LREAL;
	Decimals:	SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Append(LREAL_TO_FMTSTR(Value, Decimals, TRUE));
M_AppendREAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{bdf827ee-cb2f-0b2a-285b-3c9de78c6af6}">
      <Declaration><![CDATA[METHOD M_Find : UDINT
VAR_INPUT
	sValue: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Find:= FIND2(pList, adr(sValue));]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{fc3baabb-d4a7-08e7-3d21-7dd7a233d0d0}">
      <Declaration><![CDATA[METHOD M_Reset : I_StringBuilder
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__DELETE(pList);
nLength:= 0;
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ToAny" Id="{e82dfe86-f804-0621-2a01-a384fa38ed4a}">
      <Declaration><![CDATA[METHOD M_ToAny : BOOL
VAR_INPUT
	Value:			ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Memset(Value.pValue, 0, DINT_TO_UDINT(Value.diSize));
Memcpy(Value.pValue, pList, nLength + 1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ToString" Id="{a3197c03-d800-0530-2d92-cfaefafd28b4}">
      <Declaration><![CDATA[METHOD PUBLIC M_ToString : STRING(255)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Memcpy(Adr(M_ToString), pList, nLength + 1);]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{c1cb7260-e235-026d-2ee4-302b9fe78fed}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Length : Udint]]></Declaration>
      <Get Name="Get" Id="{5a02b74e-a78c-0da8-22e3-f37634962917}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_StringBuilder">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.FB_exit">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_Append">
      <LineId Id="67" Count="15" />
      <LineId Id="31" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_AppendANY">
      <LineId Id="31" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="33" Count="71" />
      <LineId Id="108" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="114" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_AppendBOOL">
      <LineId Id="17" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_AppendINT">
      <LineId Id="14" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_AppendREAL">
      <LineId Id="26" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_Find">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_Reset">
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_ToAny">
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.M_ToString">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_StringBuilder.P_Length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>