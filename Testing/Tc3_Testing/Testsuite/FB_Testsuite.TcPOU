<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Testsuite" Id="{139d3d86-4160-0b84-0f97-b2398a2924e9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_Testsuite EXTENDS FB_Base IMPLEMENTS I_Testsuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	stTestsuite:		ST_Testsuite;
	stTestcase:			ST_Testcase;
	fbAssert:			FB_Assert;
	nTestcase:			INT;
	nTestcaseNext:		INT;
	fbXml:				FB_XmlDomParser;
	testsuite:			PVOID;
	testcase:			PVOID;
	fbTimeout:			TON;
	sXml:				STRING(10000);
	sValue:				STRING(255);	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
fbTimeout();





//		IF fbAssert.P_Errors = 0 AND fbAssert.P_Failures = 0 AND fbAssert.P_Skipped = 0 THEN
//			testcase:= fbXml.AppendNode(testsuite, 'testcase');
//			fbXml.AppendAttribute(testcase, 'name', fbTestcase.sName);					//	name        The name of this test case, often the method name 
//			fbXml.AppendAttribute(testcase, 'classname', fbTestcase.sClassname);		//	classname   The name of the parent class/folder, often the same as the suite's name
//			fbXml.AppendAttributeAsInt(testcase, 'assertions', fbTestcase.nAssertions);	//	assertions  Number of assertions checked during test case execution
//			sValue:= LREAL_TO_FMTSTR(fbTestcase.fTime, 3, TRUE);
//			fbXml.AppendAttribute(testcase, 'time',  sValue);							//	time        Execution time of the test in seconds
//			fbXml.AppendAttribute(testcase, 'file', fbTestcase.sFile);					//	file        Source code file of this test case              
//			fbXml.AppendAttributeAsInt(testcase, 'line', fbTestcase.nLine);				//	line        Source code line number of the start of this test case
//			nAssertions:= nAssertions + fbAssert.P_List;
//			nTests:= nTests + 1;
//			fbTimeout.IN:= FALSE;
//			nTestcase:= fbTestcase.P_Number;
//		ELSE
//			IF fbTimeout.Q THEN
//				testcase:= fbXml.AppendNode(testsuite, 'testcase');
//				fbXml.AppendAttribute(testcase, 'name', fbTestcase.sName);					//	name        The name of this test case, often the method name 
//				fbXml.AppendAttribute(testcase, 'classname', fbTestcase.sClassname);		//	classname   The name of the parent class/folder, often the same as the suite's name
//				fbXml.AppendAttributeAsInt(testcase, 'assertions', fbTestcase.nAssertions);	//	assertions  Number of assertions checked during test case execution 
//				sValue:= LREAL_TO_FMTSTR(fbTestcase.fTime, 3, TRUE); 
//				fbXml.AppendAttribute(testcase, 'time', sValue);							//	time        Execution time of the test in seconds
//				fbXml.AppendAttribute(testcase, 'file', fbTestcase.sFile);					//	file        Source code file of this test case              
//				fbXml.AppendAttributeAsInt(testcase, 'line', fbTestcase.nLine);				//	line        Source code line number of the start of this test case
//					fbXml.AppendCopy(testcase, fbAssert.fbXml.GetRootNode());
//				nAssertions:= nAssertions + fbAssert.P_List;
//				nErrors:= nErrors + fbAssert.P_Errors;
//				nFailures:= nFailures + fbAssert.P_Failures;
//				nSkipped:= nSkipped + fbAssert.P_Skipped;
//				fbTimeout.IN:= FALSE;
//				nTests:= nTests + 1;
//				nTestcase:= fbTestcase.P_Number;
//			END_IF
//		END_IF
//END_IF


]]></ST>
    </Implementation>
    <Method Name="M_Started" Id="{78e3f5cf-1c2d-00e7-2cad-335430cad839}">
      <Declaration><![CDATA[METHOD PROTECTED M_Started : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

fbAssert.M_Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{fa2aca87-7276-0f36-03ec-8cf918759ac1}">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR

VAR
	nIndex: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nState OF
	0:
		IF 	SUPER^.M_Starting() THEN
			fbXml.NewDocument();
			stTestsuite.nTests:= 0;
			stTestsuite.nFailures:= 0;		
			stTestsuite.nErrors:= 0;	
			stTestsuite.nSkipped:= 0;		
			stTestsuite.nAssertions:= 0;	
			stTestsuite.fTime:= 0.0;
			stTestsuite.sFile:= '';
			nState:= 1;
		END_IF
		
	1:
		testsuite:= fbXml.AppendNode(fbXml.GetDocumentNode(), 'testsuite');			
		fbXml.AppendAttribute(testsuite, 'name', stTestsuite.sName);						//	name        Name of the test suite (e.g. class name or folder name)
		fbXml.AppendAttributeAsInt(testsuite, 'tests', stTestsuite.nTests);			//	tests       Total number of tests in this suite          
		fbXml.AppendAttributeAsInt(testsuite, 'failures', stTestsuite.nFailures);	//	failures    Total number of failed tests in this suite   
		fbXml.AppendAttributeAsInt(testsuite, 'errors', stTestsuite.nErrors);		//	errors      Total number of errored tests in this suite 
		fbXml.AppendAttributeAsInt(testsuite, 'skipped', stTestsuite.nSkipped);	//	skipped     Total number of skipped tests in this suite            
		fbXml.AppendAttributeAsInt(testsuite, 'assertions', stTestsuite.nAssertions);	//	assertions  Total number of assertions for all tests in this suite  
		fbXml.AppendAttributeAsDouble(testsuite, 'time', stTestsuite.fTime);			//	time        Aggregated time of all tests in this file in seconds       
		fbXml.AppendAttribute(testsuite, 'timestamp', stTestsuite.sTimestamp);		//	timestamp   Date and time of when the test suite was executed (in ISO 8601 format)
		fbXml.AppendAttribute(testsuite, 'file', stTestsuite.sFile);			//	file        Source code file of this test suite
			fbXml.AppendNode(testsuite, 'properties');
			fbXml.AppendNode(testsuite, 'system-out');
			fbXml.AppendNode(testsuite, 'system-err');
		nState:= 2;
	
	2:
		M_Starting:= TRUE;
	
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{86997241-28ad-050a-3199-6300c2ef6b3b}">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbXml.SetAttribute(fbXml.Attribute(testsuite, 'name'), stTestsuite.sName);
fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'tests'), stTestsuite.nTests);
fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'failures'), stTestsuite.nFailures);
fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'errors'), stTestsuite.nErrors);
fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'skipped'), stTestsuite.nSkipped);
fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'assertions'), stTestsuite.nAssertions);
fbXml.SetAttributeAsDouble(fbXml.Attribute(testsuite, 'time'), stTestsuite.fTime);
fbXml.SetAttribute(fbXml.Attribute(testsuite, 'timestamp'), stTestsuite.sTimestamp);
fbXml.SetAttribute(fbXml.Attribute(testsuite, 'file'), stTestsuite.sFile);

M_Stopping:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Testcase" Id="{6d08bc5e-dc98-0f10-1d34-7f069e37b9d3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Testcase : BOOL
VAR_INPUT
	Classname:			STRING(255);			// Classname as string
	Timeout:			TIME;			// Timeout in ms
	Next:				INT;			// Next test case
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stTestcase.sName:= CONCAT(CONCAT(CONCAT(stTestsuite.sName,'.'), 'M_Testcase-'), INT_TO_STRING(nTestcase));
stTestcase.sClassname:= Classname;
stTestcase.nAssertions:= fbAssert.P_List.P_Length;
stTestcase.nLine:= nTestcase;
stTestcase.fTime:= stTestcase.fTime + fCycleTime;
fbTimeout.IN:= TRUE;
fbTimeout.PT:= Timeout;
nTestcaseNext:= Next;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Assert" Id="{e23dc60a-455c-05e0-203b-c87d7f0bf2be}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Assert : I_Assert]]></Declaration>
      <Get Name="Get" Id="{af1ab888-05f6-09a5-0125-87c54b409f9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Assert:= fbAssert;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Node" Id="{37feeb7c-033b-03ab-2f25-c1e23d6d59c4}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Node : PVOID]]></Declaration>
      <Get Name="Get" Id="{00de385f-f60f-01e8-2c65-d740b8aed217}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Result" Id="{bc6fd8b0-043c-05d2-0765-58761c6f620a}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Result : ST_Testsuite]]></Declaration>
      <Get Name="Get" Id="{3423e8a5-6264-06ea-335d-82063928e5f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Result:= stTestsuite;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Testsuite">
      <LineId Id="97" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="308" Count="1" />
      <LineId Id="307" Count="0" />
      <LineId Id="240" Count="10" />
      <LineId Id="278" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="251" Count="14" />
      <LineId Id="279" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="267" Count="1" />
      <LineId Id="231" Count="2" />
      <LineId Id="122" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Started">
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Starting">
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="87" Count="5" />
      <LineId Id="77" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="95" Count="9" />
      <LineId Id="44" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Stopping">
      <LineId Id="36" Count="7" />
      <LineId Id="34" Count="1" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Testcase">
      <LineId Id="133" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="222" Count="1" />
      <LineId Id="229" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Assert.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Node.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Result.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>