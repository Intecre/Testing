<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Testsuite" Id="{139d3d86-4160-0b84-0f97-b2398a2924e9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK FB_Testsuite EXTENDS FB_Base IMPLEMENTS I_Testsuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fCycleTime: 		LREAL;	
	stTestsuite:		ST_Testsuite;
	stTestcase:			ST_Testcase;
	fbBuilder:			FB_StringBuilder;
	fbList:				FB_ListSTRING;
	fbAssert:			FB_Assert;
	nActual:			INT:=  E_Testcase.Init;
	nNext:				INT;
	fbTimeout:			TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();]]></ST>
    </Implementation>
    <Method Name="M_Started" Id="{78e3f5cf-1c2d-00e7-2cad-335430cad839}">
      <Declaration><![CDATA[METHOD PROTECTED M_Started : BOOL
VAR_INPUT
END_VAR
VAR
	nIndex: DINT;
	sValue: STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stTestcase.nAssertions:= fbAssert.nAssert;
IF fbAssert.nPassed = fbAssert.nAssert THEN
	fbBuilder.M_Reset()
		.M_Append('<testcase name="')
		.M_Append(stTestCase.sName)
		.M_Append('" classname="')
		.M_Append(stTestCase.sClassname)
		.M_Append('" assertions="')
		.M_AppendInt(stTestCase.nAssertions)	
		.M_Append('" time="')
		.M_AppendReal(stTestCase.fTime, 5)
		.M_Append('" file="')
		.M_Append(stTestCase.sFile)
		.M_Append('" line="')
		.M_AppendInt(stTestCase.nLine)
		.M_Append('" />')
		.M_Copy(sValue);
		fbList.M_Add(sValue);

	stTestsuite.nTests:= stTestsuite.nTests + 1;
	stTestsuite.nFailures:= stTestsuite.nFailures + fbAssert.nFailures;
	stTestsuite.nErrors:= stTestsuite.nErrors + fbAssert.nErrors;
	stTestsuite.nSkipped:= stTestsuite.nSkipped + fbAssert.nSkipped;
	stTestsuite.nAssertions:= stTestsuite.nAssertions + fbAssert.nAssert;
	stTestsuite.fTime:= stTestsuite.fTime + stTestCase.fTime;
	stTestCase.fTime:= -fCycleTime;
	fbTimeout(IN:=FALSE);
	nActual:= nNext;
ELSE
	IF fbTimeout.Q THEN
		fbBuilder.M_Reset()
			.M_Append('<testcase name="')
			.M_Append(stTestCase.sName)
			.M_Append('" classname="')
			.M_Append(stTestCase.sClassname)
			.M_Append('" assertions="')
			.M_AppendInt(stTestCase.nAssertions)
			.M_Append('" time="')
			.M_AppendReal(stTestCase.fTime, 5)
			.M_Append('" file="')
			.M_Append(stTestCase.sFile)
			.M_Append('" line="')
			.M_AppendInt(stTestCase.nLine)
			.M_Append('" >');
		WHILE nIndex < fbAssert.fbList.P_Length DO
			fbBuilder.M_Append(fbAssert.fbList.M_Item(nIndex));
			nIndex:= nIndex + 1;
		END_WHILE
		fbBuilder.M_Append('</testcase>')
			.M_Copy(sValue);
		fbList.M_Add(sValue);
		stTestsuite.nTests:= stTestsuite.nTests + 1;
		stTestsuite.nFailures:= stTestsuite.nFailures + fbAssert.nFailures;
		stTestsuite.nErrors:= stTestsuite.nErrors + fbAssert.nErrors;
		stTestsuite.nSkipped:= stTestsuite.nSkipped + fbAssert.nSkipped;
		stTestsuite.nAssertions:= stTestsuite.nAssertions + fbAssert.nAssert;
		stTestsuite.fTime:= stTestsuite.fTime + stTestCase.fTime;
		stTestCase.fTime:= -fCycleTime;
		fbTimeout(IN:=FALSE);
		nActual:= nNext;
	END_IF
END_IF
stTestcase.fTime:= stTestcase.fTime + fCycleTime;
fbAssert.M_Reset();
M_Started:= nActual = E_Testcase.Done;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{fa2aca87-7276-0f36-03ec-8cf918759ac1}">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR

VAR
	nIndex: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nState OF
	0:
		IF 	SUPER^.M_Starting() THEN
			fbList.M_Clear();
			fCycleTime:= F_GetCycleTime();	
			stTestsuite.sName:= F_GetName(sInstancePath);
			stTestsuite.nTests:= 0;
			stTestsuite.nFailures:= 0;		
			stTestsuite.nErrors:= 0;	
			stTestsuite.nSkipped:= 0;		
			stTestsuite.nAssertions:= 0;	
			stTestsuite.fTime:= 0.0;
			stTestsuite.sFile:= '';
			nState:= 1;
		END_IF
		
	1:
		nActual:= E_Testcase.Start;
		M_Starting:= TRUE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{86997241-28ad-050a-3199-6300c2ef6b3b}">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//fbXml.SetAttribute(fbXml.Attribute(testsuite, 'name'), stTestsuite.sName);
//fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'tests'), stTestsuite.nTests);
//fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'failures'), stTestsuite.nFailures);
//fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'errors'), stTestsuite.nErrors);
//fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'skipped'), stTestsuite.nSkipped);
//fbXml.SetAttributeAsInt(fbXml.Attribute(testsuite, 'assertions'), stTestsuite.nAssertions);
//fbXml.SetAttributeAsDouble(fbXml.Attribute(testsuite, 'time'), stTestsuite.fTime);
//fbXml.SetAttribute(fbXml.Attribute(testsuite, 'timestamp'), stTestsuite.sTimestamp);
//fbXml.SetAttribute(fbXml.Attribute(testsuite, 'file'), stTestsuite.sFile);

M_Stopping:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Testcase" Id="{6d08bc5e-dc98-0f10-1d34-7f069e37b9d3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Testcase : BOOL
VAR_INPUT
	Classname:			STRING(255);	// Classname as string
	Timeout:			TIME;			// Timeout in ms
	File:				STRING(255);
	Line:				DINT;	
	Next:				INT;			// Next test case
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stTestcase.sName:= CONCAT(CONCAT(CONCAT(stTestsuite.sName,'.'), 'M_Testcase-'), INT_TO_STRING(nActual));
stTestcase.sClassname:= Classname;
stTestcase.nAssertions:= fbAssert.fbList.P_Length;
stTestcase.sFile:= File;
stTestcase.NLine:= Line;
IF Timeout <> T#0S THEN
	fbTimeout(IN:= TRUE, PT:= Timeout);
END_IF
nNext:= Next;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Assert" Id="{e23dc60a-455c-05e0-203b-c87d7f0bf2be}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Assert : I_Assert]]></Declaration>
      <Get Name="Get" Id="{af1ab888-05f6-09a5-0125-87c54b409f9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Assert:= fbAssert;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Node" Id="{37feeb7c-033b-03ab-2f25-c1e23d6d59c4}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Node : PVOID]]></Declaration>
      <Get Name="Get" Id="{00de385f-f60f-01e8-2c65-d740b8aed217}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Result" Id="{bc6fd8b0-043c-05d2-0765-58761c6f620a}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Result : ST_Testsuite]]></Declaration>
      <Get Name="Get" Id="{3423e8a5-6264-06ea-335d-82063928e5f1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Result:= stTestsuite;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Testcase" Id="{3b7b6a2e-6d4a-0f0e-2a1d-3d960844879b}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Testcase : int]]></Declaration>
      <Get Name="Get" Id="{854def52-87cb-03f8-22d6-ee5144597bf5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Testcase:= nActual;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Testsuite">
      <LineId Id="97" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Started">
      <LineId Id="84" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="101" Count="4" />
      <LineId Id="118" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="108" Count="4" />
      <LineId Id="121" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="115" Count="2" />
      <LineId Id="142" Count="4" />
      <LineId Id="141" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Starting">
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="87" Count="5" />
      <LineId Id="77" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Stopping">
      <LineId Id="36" Count="7" />
      <LineId Id="34" Count="1" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Testcase">
      <LineId Id="133" Count="2" />
      <LineId Id="241" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="236" Count="2" />
      <LineId Id="229" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Assert.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Node.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Result.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Testcase.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>