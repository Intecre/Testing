<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{433aef42-481d-09d7-2a0d-9f4eb2c45d04}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	nIndex: 		INT;
	sValue:			STRING(255);
	fbList:			FB_ListSTRING;
	fbBuilder:		FB_StringBuilder;
	fbTestsuites:	FB_Testsuites;
	fbTestsuite1:	FB_Testsuite;
	fbTestsuite2:	FB_Testsuite;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTestsuites();
fbTestsuites.M_Add(fbTestsuite1);
fbTestsuites.M_Add(fbTestsuite2);

fbTestsuite1();
CASE fbTestsuite1.P_Testcase OF
	E_Testcase.Start:
		fbBuilder.M_Reset().M_Append('Test').M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'Test', 'FB_StringBuilder.M_Append()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 1);
		
	1:
		fbBuilder.M_Reset().M_Append('Test').M_Append('-Test').M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'Test-Test', 'FB_StringBuilder.M_Append().M_Append()');
		fbTestsuite1.P_Assert.M_Equals_DINT(9, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 2);
		
	2:
		fbBuilder.M_Reset().M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '', 'FB_StringBuilder.M_Reset()');
		fbTestsuite1.P_Assert.M_Equals_DINT(0, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 3);
	
	3:
		fbBuilder.M_Reset().M_AppendBOOL(TRUE).M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'TRUE', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_DINT(4, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 4);
		
	4:
		fbBuilder.M_Reset().M_AppendINT(33).M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '33', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_DINT(2, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 5);
		
	5:
		fbBuilder.M_Reset().M_AppendREAL(33.44, 2).M_CopyTo(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '33.44', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_DINT(5, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 6);
		
	6:
		sValue:= '';
		sValue:= fbBuilder.M_Reset().M_Append('Test').M_ToString();
		fbTestsuite1.P_Assert.M_Equals_STRING('Test', sValue, 'FB_StringBuilder.M_ToString()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 7);
		
	7:
		fbTestsuite1.P_Assert.M_IsTRUE(TRUE, 'Placeholder');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', E_Testcase.Done);
	
	E_Testcase.Done:;
	
END_CASE

fbTestsuite2();
CASE fbTestsuite2.P_Testcase OF
	E_Testcase.Start:
		fbList.M_Clear();
		FOR nIndex:= 0 TO 49 DO
			fbList.M_Add(INT_TO_STRING(nIndex));
		END_FOR
		fbTestsuite2.P_Assert.M_Equals_STRING('49', fbList.M_Item(fbList.P_Length - 1) ,'FB_ListSTRING.M_Item()');
		fbTestsuite2.P_Assert.M_Equals_STRING('10', fbList.M_Item(10) ,'FB_ListSTRING.M_Item()');
		fbTestsuite2.P_Assert.M_Equals_DINT(50, fbList.P_Length ,'FB_ListSTRING.P_Length');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', 1);
	
1:
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Clear(), 'FB_ListSTRING.M_Clear()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', 2);		
2:
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Add('1'), 'FB_ListSTRING.M_Add()');
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Add('3'), 'FB_ListSTRING.M_Add()');
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Insert(1, '2'), 'FB_ListSTRING.M_Insert()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '',3);
		
3:
		fbTestsuite2.P_Assert.M_Equals_STRING('2', fbList.M_Item(1), 'fbList.M_Item()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', E_Testcase.Done);			

	E_Testcase.Done:;
	
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="559" Count="1" />
      <LineId Id="668" Count="1" />
      <LineId Id="561" Count="0" />
      <LineId Id="563" Count="1" />
      <LineId Id="635" Count="0" />
      <LineId Id="566" Count="3" />
      <LineId Id="638" Count="2" />
      <LineId Id="572" Count="2" />
      <LineId Id="641" Count="2" />
      <LineId Id="577" Count="2" />
      <LineId Id="644" Count="2" />
      <LineId Id="581" Count="2" />
      <LineId Id="647" Count="2" />
      <LineId Id="585" Count="2" />
      <LineId Id="650" Count="2" />
      <LineId Id="589" Count="0" />
      <LineId Id="598" Count="1" />
      <LineId Id="666" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="600" Count="8" />
      <LineId Id="80" Count="0" />
      <LineId Id="671" Count="0" />
      <LineId Id="677" Count="2" />
      <LineId Id="685" Count="0" />
      <LineId Id="687" Count="2" />
      <LineId Id="691" Count="1" />
      <LineId Id="681" Count="0" />
      <LineId Id="672" Count="0" />
      <LineId Id="713" Count="1" />
      <LineId Id="709" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="717" Count="2" />
      <LineId Id="706" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="721" Count="1" />
      <LineId Id="720" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="682" Count="1" />
      <LineId Id="674" Count="0" />
      <LineId Id="670" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>